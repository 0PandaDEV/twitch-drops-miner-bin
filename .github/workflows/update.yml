name: aur-auto-update

on:
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:

jobs:
  check-update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Download AppImages and check for updates
        id: check_update
        run: |
          # Download the AppImages
          wget -O Twitch.Drops.Miner.Linux.AppImage-x86_64.zip https://github.com/DevilXD/TwitchDropsMiner/releases/download/dev-build/Twitch.Drops.Miner.Linux.AppImage-x86_64.zip
          wget -O Twitch.Drops.Miner.Linux.AppImage-aarch64.zip https://github.com/DevilXD/TwitchDropsMiner/releases/download/dev-build/Twitch.Drops.Miner.Linux.AppImage-aarch64.zip
          
          # Calculate new checksums
          NEW_SHA_X86_64=$(sha256sum Twitch.Drops.Miner.Linux.AppImage-x86_64.zip | awk '{print $1}')
          NEW_SHA_AARCH64=$(sha256sum Twitch.Drops.Miner.Linux.AppImage-aarch64.zip | awk '{print $1}')
          
          # Get current checksums from PKGBUILD
          CURRENT_SHA_X86_64=$(grep "sha256sums_x86_64=" PKGBUILD | cut -d"'" -f2)
          CURRENT_SHA_AARCH64=$(grep "sha256sums_aarch64=" PKGBUILD | cut -d"'" -f2)
          
          echo "Current x86_64 checksum: $CURRENT_SHA_X86_64"
          echo "New x86_64 checksum: $NEW_SHA_X86_64"
          echo "Current aarch64 checksum: $CURRENT_SHA_AARCH64"
          echo "New aarch64 checksum: $NEW_SHA_AARCH64"
          
          # Check if checksums are different
          if [ "$CURRENT_SHA_X86_64" = "$NEW_SHA_X86_64" ] && [ "$CURRENT_SHA_AARCH64" = "$NEW_SHA_AARCH64" ]; then
            echo "No update needed - checksums are the same"
            echo "update_needed=false" >> $GITHUB_OUTPUT
          else
            echo "Update needed - checksums are different"
            echo "update_needed=true" >> $GITHUB_OUTPUT
            # Generate new version based on current date/time
            NEW_VERSION=$(date '+%Y%m%d.%H%M%S')
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
            echo "SHA_X86_64=$NEW_SHA_X86_64" >> $GITHUB_ENV
            echo "SHA_AARCH64=$NEW_SHA_AARCH64" >> $GITHUB_ENV
            echo "New version will be: $NEW_VERSION"
          fi

      - name: Update PKGBUILD and .SRCINFO
        if: steps.check_update.outputs.update_needed == 'true'
        run: |
          VERSION=$NEW_VERSION

          # Update PKGBUILD
          sed -i "s/^pkgver=.*/pkgver=$VERSION/" PKGBUILD
          sed -i "s/^sha256sums_x86_64=.*/sha256sums_x86_64=('$SHA_X86_64')/" PKGBUILD
          sed -i "s/^sha256sums_aarch64=.*/sha256sums_aarch64=('$SHA_AARCH64')/" PKGBUILD

          # Update .SRCINFO
          sed -i "s/^[[:space:]]*pkgver = .*/\tpkgver = $VERSION/" .SRCINFO
          sed -i "s/^[[:space:]]*sha256sums_x86_64 = .*/\tsha256sums_x86_64 = $SHA_X86_64/" .SRCINFO
          sed -i "s/^[[:space:]]*sha256sums_aarch64 = .*/\tsha256sums_aarch64 = $SHA_AARCH64/" .SRCINFO

      - name: Commit and push to AUR
        if: steps.check_update.outputs.update_needed == 'true'
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}

      - name: Add AUR host key
        if: steps.check_update.outputs.update_needed == 'true'
        run: |
          mkdir -p ~/.ssh
          echo "aur.archlinux.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEuBKrPzbawxA/k2g6NcyV5jmqwJ2s+zpgZGZ7tpLIcN" >> ~/.ssh/known_hosts
          echo "aur.archlinux.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDKF9vAFWdgm9Bi8uc+tYRBmXASBb5cB5iZsB7LOWWFeBrLp3r14w0/9S2vozjgqY5sJLDPONWoTTaVTbhe3vwO8CBKZTEt1AcWxuXNlRnk9FliR1/eNB9uz/7y1R0+c1Md+P98AJJSJWKN12nqIDIhjl2S1vOUvm7FNY43fU2knIhEbHybhwWeg+0wxpKwcAd/JeL5i92Uv03MYftOToUijd1pqyVFdJvQFhqD4v3M157jxS5FTOBrccAEjT+zYmFyD8WvKUa9vUclRddNllmBJdy4NyLB8SvVZULUPrP3QOlmzemeKracTlVOUG1wsDbxknF1BwSCU7CmU6UFP90kpWIyz66bP0bl67QAvlIc52Yix7pKJPbw85+zykvnfl2mdROsaT8p8R9nwCdFsBc9IiD0NhPEHcyHRwB8fokXTajk2QnGhL+zP5KnkmXnyQYOCUYo3EKMXIlVOVbPDgRYYT/XqvBuzq5S9rrU70KoI/S5lDnFfx/+lPLdtcnnEPk=" >> ~/.ssh/known_hosts
          echo "aur.archlinux.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLMiLrP8pVi5BFX2i3vepSUnpedeiewE5XptnUnau+ZoeUOPkpoCgZZuYfpaIQfhhJJI5qgnjJmr4hyJbe/zxow=" >> ~/.ssh/known_hosts
      - name: Set up Git
        if: steps.check_update.outputs.update_needed == 'true'
        run: |
          git config --global user.email "70103896+0PandaDEV@users.noreply.github.com"
          git config --global user.name "0PandaDEV"

      - name: Commit and push changes
        if: steps.check_update.outputs.update_needed == 'true'
        run: |
          git add PKGBUILD .SRCINFO LICENSE
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git commit -m "chore: update to $NEW_VERSION"

          # Push to GitHub first
          git push origin master

          # Prepare AUR-only version working with existing history
          git remote add aur ssh://aur@aur.archlinux.org/twitch-drops-miner-bin.git
          git fetch aur master

          # Create branch based on AUR history
          git checkout -b aur-temp aur/master

          # Update files to match our version
          git checkout master -- PKGBUILD .SRCINFO LICENSE

          # Remove .github directory if it exists in AUR
          if [ -d ".github" ]; then
            git rm -rf .github
          fi

          # Commit the changes
          git add PKGBUILD .SRCINFO LICENSE
          git commit -m "chore: update to $NEW_VERSION"

          # Push to AUR
          git push aur aur-temp:master

          # Return to master branch and clean up
          git checkout master
          git branch -D aur-temp